## Loding essential libraries:

# In[ ]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# # **1. Data Exploration:**

# In[ ]:


calendar_df = pd.read_excel("C:\\Users\\DELL\\Downloads\\Air Bnb\\reviews.xlsx")
listings_df = pd.read_excel("C:\\Users\\DELL\\Downloads\\Air Bnb\\listing.xlsx")
reviews_df = pd.read_excel("C:\\Users\\DELL\\Downloads\\Air Bnb\\calender.xlsx")


# ## Preview each DataFrame to understand its structure:

# In[ ]:


# Display the first few rows of each dataframe
print("Listings Dataset:")
print(listings_df.head())

print("\nCalendar Dataset:")
print(calendar_df.head())

print("\nReviews Dataset:")
print(reviews_df.head())

# Get summary statistics for numerical columns
print("\nListings Dataset Summary:")

print("\nCalendar Dataset Summary:")

print("\nReviews Dataset Summary:")


# In[ ]:


listings_df.shape

calendar_df.shape

reviews_df.shape


# In[ ]:


listings_df.info()

calendar_df.info()

reviews_df.info()


# # **2. Data Cleaning:**

# ## Check for missing values:

# In[ ]:


# Check for remaining missing values in each dataset
print("\nMissing values in listings_df:")
print(listings_df.isnull().sum())

print("\nMissing values in calendar_df:")
print(calendar_df.isnull().sum())

print("\nMissing values in reviews_df:")
print(reviews_df.isnull().sum())


# In[ ]:


# Fill missing reviews_per_month in listings_df with the median value
listings_df['reviews_per_month'] = listings_df['reviews_per_month'].fillna(listings_df['reviews_per_month'].median())


# In[ ]:


# Replace missing comments with a placeholder
calendar_df.fillna({'comments':"No comment"},inplace=True)


# In[ ]:


# Drop rows with missing price values
reviews_df.dropna(subset=['price'], inplace=True)


# ## Re-Verify the Missing Values:

# In[ ]:


print("Remaining missing values in listings_df:\n", listings_df.isnull().sum())
print("\nRemaining missing values in calendar_df:\n", calendar_df.isnull().sum())
print("\nRemaining missing values in reviews_df:\n", reviews_df.isnull().sum())


# # **3. Basic Statistics and Distribution Analysis:**

# In[ ]:


# Calculate average price from listings dataset
average_price = listings_df['price'].mean()
print(f"Average Price of Listings: {average_price}")

# Distribution of property types
property_type_distribution = listings_df['property_type'].value_counts()
print("\nProperty Type Distribution:")
print(property_type_distribution)

# Distribution of neighborhoods
neighborhood_distribution = listings_df['neighbourhood_cleansed'].value_counts()
print("\nNeighborhood Distribution:")
print(neighborhood_distribution)


# In[ ]:


listings_df.describe()

calendar_df.describe()

reviews_df.describe()


# # **4. Visualization:**

# In[ ]:


# Histogram of listing prices
plt.figure(figsize=(10, 5))
sns.histplot(listings_df['price'], bins=30, kde=True)
plt.title("Distribution of Listing Prices")
plt.xlabel("Price")
plt.ylabel("Frequency")
plt.show()

# Bar chart for room types
plt.figure(figsize=(8, 5))
sns.countplot(data=listings_df, x='room_type')
plt.title("Room Type Distribution")
plt.xlabel("Room Type")
plt.ylabel("Count")
plt.show()

# Pie chart for property types
plt.figure(figsize=(8, 8))
listings_df['property_type'].value_counts().plot.pie(autopct='%1.1f%%')
plt.title("Property Type Distribution")
plt.ylabel("")  # Hide y-label for aesthetics
plt.show()

# Distribution of Property Types
sns.set_style("whitegrid")  # Set the aesthetic style of the plots

# Calculate teh distribution of the property types
property_type_counts = listings_df['property_type'].value_counts()

# Create a bar chart for the distribution of propery types
plt.figure(figsize=(10, 8))
sns.barplot(x=property_type_counts.values, y=property_type_counts.index, palette="Blues_d")
plt.title("Distribution of Property Types")
plt.xlabel("Number of Listings")
plt.ylabel("Propery Type")
plt.show()

# Distribution of Neighborhoods
neighborhood_counts = listings_df['neighbourhood_group_cleansed'].value_counts().head(10) # Calculate the distribution of listings by neighborhood

# Create a bar chart for the top neighborhoods with the most listings
plt.figure(figsize=(10, 8))
sns.barplot(x=neighborhood_counts.values, y=neighborhood_counts.index, palette="coolwarm")
plt.title('Top 10 Neighborhoods by Number of Listings')
plt.xlabel('Number of Listings')
plt.ylabel('Neighborhood')
plt.show()

# Price Distribution
plt.figure(figsize=(12, 6))
sns.histplot(listings_df['price'], bins=50, kde=True, color="skyblue")
plt.title('Distribution of Listing Prices')
plt.xlabel('Price ($)')
plt.ylabel('Number of Listings')
plt.xlim(0, listings_df['price'].quantile(0.95))  # Limiting x-axis to 95th percentile for better visualization
plt.show()

# Price by Room Type
plt.figure(figsize=(12, 6))
sns.boxplot(x='room_type', y='price', data=listings_df)
plt.title('Price Distribution by Room Type')
plt.xlabel('Room Type')
plt.ylabel('Price ($)')
plt.ylim(0, listings_df['price'].quantile(0.95))  # Limiting y-axis to 95th percentile for better visualization
plt.show()

# Room Type Preferences
plt.figure(figsize=(10, 6))
sns.countplot(data=listings_df, y='room_type', order=listings_df['room_type'].value_counts().index)
plt.title('Room Type Preferences')
plt.xlabel('Number of Listings')
plt.ylabel('Room Type')
plt.show()

# Number of Listings by Neighborhood
plt.figure(figsize=(10, 8))
sns.countplot(data=listings_df, y='neighbourhood_group_cleansed', order=listings_df['neighbourhood_group_cleansed'].value_counts().index)
plt.title('Number of Listings by Neighborhood')
plt.xlabel('Number of Listings')
plt.ylabel('Neighborhood')
plt.show()

# Availability by Neighborhood
plt.figure(figsize=(12, 8))
sns.boxenplot(y='neighbourhood_group_cleansed', x='availability_365', data=listings_df)
plt.title('Availability by Neighborhood')
plt.xlabel('Availability (Days out of 365)')
plt.ylabel('Neighborhood')
plt.show()

# Select relevant numerical columns for correlation analysis
numerical_columns = [
    'price', 'bedrooms', 'bathrooms', 'accommodates',
    'minimum_nights', 'maximum_nights', 'number_of_reviews',
    'review_scores_rating', 'availability_365'
]
# but all of these features are in the object type, so we need to convert them
for col in numerical_columns:
    listings_df[col] = pd.to_numeric(listings_df[col], errors='coerce')

# Calculate the correlation matrix
corr_matrix = listings_df[numerical_columns].corr()

# Plot the heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Selected Features')
plt.show()


# # **5. Correlation Analysis:**

# In[ ]:


# Select only numeric columns from listings_df
numeric_listings_df = listings_df.select_dtypes(include=['float64', 'int64'])

# Compute the correlation matrix
correlation_matrix = numeric_listings_df.corr()

# Plot the correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix of Listings Dataset")
plt.show()
